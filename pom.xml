<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>samuel-santinelli</groupId>
	<artifactId>spring-jwt-authentication</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-jwt-authentication</name>
	<description>This project is a comprehensive example of how to implement JWT (JSON Web Token) authentication and authorization using Spring Boot. It covers various aspects of security, such as user registration, login, and securing API endpoints with JWT. The project is structured to demonstrate the best practices in securing a Spring Boot application, including:                   - **User Authentication**: Users can register and log in to the application. Passwords are securely stored using BCrypt hashing.          - **JWT Generation and Validation**: Upon successful authentication, a JWT is generated and returned to the client. This token is used to            authenticate subsequent requests.         - **Securing Endpoints**: Certain endpoints are secured and require a valid JWT token to access. Unauthorized requests are properly handled.          - **Integration with PostgreSQL**: User data is stored in a PostgreSQL database, demonstrating how to integrate Spring Data JPA with a            relational database.          - **Exception Handling**: The project includes global exception handling to provide meaningful error messages to the client. This project aims to serve as a solid starting point for developers looking to secure their Spring Boot applications with JWT and implement robust authentication and authorization mechanisms.</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
